ASSIGNMENT 16


SINGLE CYCLE CPU DESIGN FROM ISA


Group No. : 4
Members:
1.Sayan Ghosh(14CS10061)
2.Ashrujit Ghoshal (14CS10060)


AIM:
INSTRUCTION FORMAT DESIGN FOR SINGLE CYCLE CPU


ISA GENERAL PURPOSE REGISTERS


There are 8 general purpose registers r0 to r7. Thus we can use 3 bits to encode them.
All registers are 16 bit in size.


MEMORY ADDRESS
The memory address is 16-bits in size. The memory width is also 16 bits.


INSTRUCTION SIZE
The instructions can be either 16-bit in size.


GENERAL ASSEMBLY INSTRUCTION FORMAT


        ---------  -----------  -----------
   | opcode  || operand 1 || operand 2 |
    ---------  -----------  -----------


ADDRESING MODES FOR OPERAND 2


1. Immediate (with 16-bit operand)
2. Register
3. Base addressing 



INSTRUCTION FORMAT DESIGN:


The instruction set defined in the question consists of 4 broad instructions:
1. Load and Store Instructions
2. ALU Instructions
3. Branch Instructions
4. Subroutine Instructions


The first step of our design includes calculating the total number of instructions/ classes of instructions and decide on the opcode bits.




So, we would require 3 bits for encoding the addressing modes for operand 2




OPCODE BITS


We define a total of 10 major instruction classes as follows : 
1. load
2. store
3. ALU(add)
4. ALU(sub)
5. ALU(and)
6. ALU(or)
7. ALU(cmp)
8. ALU(mns)
9. jump
10. jal
11. jr 




Thus we need 4 opcode bits to encode these 10 instructions.
Further we make the encoding such that the first opcode bit is used to denote whether the instruction is of ALU type or of NON-ALU Type
Thus 0 indicates the instruction is of ALU type and the rest of the 3 bits are used to indicate if the instruction is and, add or any other type of ALU instruction.
If the instruction is of NON-ALU type, then the first opcode bit is 1.


The encoding of different instructions are shown as follows.


        Instruction                Opcode Bits
        
        load                        1000
        store                        1001
        ALU(add)                0000
        ALU(sub)                0001
        ALU(and)                0010
        ALU(or)                0011
        ALU(cmp)                0100
        ALU(mns)                0101
        jump                        1010
        jal                        1100
        jr                        1110




ADDRESSING MODES


We keep 2 separate bits as a part of operand 2 to encode the addressing modes of operand 2.
Addressing mode is not needed for first operand as the first operand is always in register mode.

As Program Counter(PC) is incremented in the Instruction Fetch phase, we will fetch current instruction and check the addressing mode of operand 2.
If the operand 2 is of type register, then PC is incremented by 2.


The encoding of the Addressing Mode bits based on the addressing mode is as follows:
        
        Addressing Mode                                Encoding
        
        Immediate                                        01
        Register                                         00
        Base-addressing                          		 10
        
        
INSTRUCTION FORMAT FOR DIFFERENT INSTRUCTIONS


Load Instruction
> ld dst, src 
dst is in register mode. So we assign 3 bits for operand 1.
Now the addressing mode of the src may be of several addressing modes and thus we need to keep separate 2 bits to specify the addressing modes


> li r5, #100


The instruction encoding will be as follows:
opcode bits : 1000 (4 bits)
r5 (3 bits) : 101 (register is r5, so encoding for 5 is 101)
Since src is #100, the addressing mode is immediate.
addressing mode bits: 01 (2 bits)
The remaining 7 bits of current word contain the value

example:
          ----   ----        ----   ------
        | 1000 || 101 || 001 ||1100100|
          ----         ----   ----   ------
       






> lr r5, r7


The instruction encoding will be as follows:
opcode bits : 1000 (4 bits)
r5 (3 bits) : 101 (register is r5, so encoding for 5 is 101)
Since src is r7, the addressing mode is register.
addressing mode bits: 00 (2 bits)
The next 3 bits will be :111(r7)
Thus, the operand 2 is of 5 bits here.
The remaining 4 bits of current word are treated as don't cares.


Now, as addressing mode is register, the instruction size will be 16 bits.


          ----   ----        ---------  ---
        | 1000 || 101 || 00 111 ||xxxx|
          ----         ----   ---------  ---


>lx r5, #10(r1)


The instruction encoding will be as follows:
opcode bits : 1000 (4 bits)
r5 (3 bits) : 101 (register is r5, so encoding for 5 is 101)
The addressing mode is base addressing.
addressing mode bits: 10 (2 bits)
The next 3 bits will be :001(r1)



Now, as addressing mode is base addressing, 4 remaing bits are for offset



          ----   ----        -------------
        | 1000 || 101 || 10 001 1010 |
          ----         ----   -------------
      



        
-->Store Instructions
---------------------
>st dst, src
Now, the src is always in register mode.


>stx -#5(r2), r3
The instruction encoding will be as follows:
opcode bits : 1001 (4 bits)
r2 (3 bits) : 010 (register is r2, so encoding for 2 is 010)
The addressing mode is base addressing.
addressing mode bits: 10 (2 bits)
The next 3 bits will be :011(r3)



Now, as addressing mode is base addressing, 4 remaing bits are for offset



          ----   ----        -------------
        | 1001 || 010 || 10 011 0101 |
          ----         ----   -------------
      




-->ALU Instructions
--------------------
The ALU instructions are of the type op r1,r2.
Thus in ALU instructions, the first 4 bits are the opcode bits and the next 3 bits contain the operand 1 and the remaining bits are for addressing modes and operand2
Thus in ALU instructions operand 2 has 2 bits reserved for addressing modes and remaining 7 bits are for registers based on the addressing mode.


For example:
> addi r1, #43.
The encoding of above instruction is as follows:
The instruction encoding will be as follows:
opcode bits : 0000 (4 bits)
r1 (3 bits) : 001 
Since src is #43, the addressing mode is immediate.
addressing mode bits: 01 (2 bits)
The remaining 7 bits of current word contain the value
          ----   ----        ----   ------
        | 0000 || 001 || 01 ||0101011|
          ----         ----   ----   ------
       


> subr r4, r5

The instruction encoding will be as follows:
opcode bits : 0001 (4 bits)
r4 (3 bits) : 100 (register is r5, so encoding for 5 is 101)
Since src is r5, the addressing mode is register.
addressing mode bits: 00 (2 bits)
The next 3 bits will be :101(r5)
Thus, the operand 2 is of 5 bits here.
The remaining 4 bits of current word are treated as don't cares.


Now, as addressing mode is register, the instruction size will be 16 bits.


          ----   ----        ---------  ---
        | 0001 || 100 || 00 101 ||xxxx|
          ----         ----   ---------  ---
       
        


-->Jump Instructions
---------------------
In jump instructions, we have the 4 bits of opcode as usual. Other than the opcode bits we will have another 3 bits specifying which jump instruction we are looking at and another 1 bit to say whether we are looking at equals or not equals. We also have 1 flag bit.
The encoding of the jump bits are as follows


        Jump Instruction                Encoding(3 bits for type of jump + 1 bit for equals/ not equals)
        ----------------                ----------------------------------------------------------------
                j                                                0000
                jz                                                0010
                jnz                                                0011
                jc                                                 0100
                jnc                                                0101
                jv                                                0110
                jnv                                                 0111
                jm                                                1000
                jnm                                                1001


For example, jnm encoding 1001 means that it this jump is encoded as 100 but as it is of jump when not equals type we have the bit 1 at the end. Thus jnm is encoded as 1001 but jm which is of jump when equals type is encoded as 1000.
 

The last 8 bits are for specifying the offset.

So, jm label is encoded as

for example : 
          ----   -----         ---------
        | 1010 || 1000 || 00000101|
          ----         -----   ---------
       
        


â†’ Subroutine Calls
---------------------
> jal r5, sub
Thus in jal we have the instruction format as opcode, operand 1 and offset.
The offset is PC relative displacement and thus is considered to be 16 bit word.


Thus in this instruction, we have a 4 bit opcode field followed by a 3 bit operand 1 field and 9 bit offset.
The last 9 bits are for specifying the offset.

For example : 

          ----   ----        ----------
        | 1100 || 101 || 000001010|
          ----         ----   ----------
       


> jr r5
 The jr instruction consists of opcode followed by operand 1.
 Thus the jr instruction is a 16 bit instruction which has opcode field followed by operand 1 and 9 bit offset

 The last 9 bits are for specifying the offset.

 For example : 
          ----   ----        ----------
        | 1110 || 101 || 000001110|
          ----         ----   ----------
       

       